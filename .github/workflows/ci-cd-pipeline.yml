# Purpose: Defines the name of the GitHub Actions workflow.
# Why: Helps identify the workflow in the GitHub Actions interface.
name: CI/CD Pipeline for .NET Core App

# Purpose: Specifies when the workflow should trigger.
# push: Runs the workflow when changes are pushed to the master branch.
# pull_request: Runs the workflow for pull requests targeting the master branch.
# Why: Ensures the pipeline validates changes in the main development branch (master) or during code reviews.
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Job 1: Build
  # Purpose: Builds the .NET Core application.
  # Why: Ensures the application compiles without errors and passes unit tests.
  build:
    runs-on: ubuntu-latest

    steps:
      # Purpose: Checks out the code from the repository into the runner environment.
      # Why: Allows the workflow to access the source code needed for building, testing, and analysis.
      - name: Checkout code
        uses: actions/checkout@v2

      # Purpose: Sets up the specified version of .NET Core SDK (8.0.x) in the runner environment.
      # Why: Ensures the correct runtime and SDK are available for building and testing the project.
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      # Purpose: Restores NuGet packages defined in the project file.
      # Why: Ensures all dependencies are available for building and testing.
      - name: Restore dependencies
        run: dotnet restore DotNetCoreApp/DotNetCoreApp.csproj

      # Purpose: Builds the .NET Core project in Release configuration.
      # Why: Compiles the code, ensuring there are no syntax errors or unresolved dependencies.
      - name: Build the project
        run: dotnet build DotNetCoreApp/DotNetCoreApp.csproj --configuration Release

      # Purpose: Executes unit tests in the specified test project.
      # Why: Validates that the application behaves as expected and prevents regressions.
      - name: Run tests
        run: dotnet test DotNetCoreApp.Tests/DotNetCoreApp.Tests.csproj --configuration Release

  # Job 2: SonarQube Analysis
  # Purpose: Performs static code analysis using SonarQube.
  # Why: Ensures code quality and detects potential issues.
  sonarQubeAnalysis:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SonarScanner .NET Core Global Tool
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Run SonarQube analysis
        run: |
          dotnet sonarscanner begin /o:"aneeshdasmazumder" /k:"aneeshdasmazumder_cicd-dotnet" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.token=${{ secrets.SONAR_TOKEN }}
      
      - name: Build the project for analysis
        run: dotnet build DotNetCoreApp/DotNetCoreApp.csproj --configuration Release

      - name: End SonarQube analysis
        run: dotnet sonarscanner end /d:sonar.token=${{ secrets.SONAR_TOKEN }}

  # Job 3: Docker Deployment
  # Purpose: Builds and pushes a Docker image to Docker Hub.
  # Why: Packages the application for deployment in containerized environments.
  dockerDeployment:
    runs-on: ubuntu-latest
    needs: [build, sonarQubeAnalysis]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/dotnet-core-app:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/dotnet-core-app:latest

  # Job 4: Terraform Deployment (AWS Integration)
  # Purpose: Deploys the application to AWS using Terraform.
  # Why: Automates infrastructure provisioning and ensures consistent deployment processes.
  terraform:
    runs-on: ubuntu-latest
    needs: [build, sonarQubeAnalysis, dockerDeployment]

    env:
      AWS_REGION: ap-south-1

    steps:
      # Purpose: Checks out the repository code.
      # Why: Ensures the Terraform configuration files are accessible in the runner environment.
      - name: Checkout code
        uses: actions/checkout@v2

      # Purpose: Sets up the specified version of Terraform CLI.
      # Why: Ensures that the correct version of Terraform is available in the runner environment.
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.4.5'

      # Purpose: Creates the AWS credentials directory.
      # Why: Ensures the directory exists for storing AWS credentials needed for authentication.
      - name: Create AWS credentials directory
        run: mkdir -p ~/.aws

      # Purpose: Configures AWS CLI with credentials.
      # Why: Allows Terraform to authenticate with AWS using the provided credentials.
      - name: Configure AWS CLI
        run: |
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "region = ${{ env.AWS_REGION }}" > ~/.aws/config

      # Purpose: Initializes the Terraform configuration.
      # Why: Prepares the working directory for other Terraform commands by downloading necessary plugins and modules.
      - name: Terraform init
        run: |
          cd terraform
          terraform init
      
      - name: Terraform validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform plan
        run: |
          cd terraform
          terraform plan

      # Purpose: Applies the Terraform configuration to provision infrastructure.
      # Why: Automates the creation and management of AWS resources as defined in the configuration files.
      - name: Terraform apply
        run: |
          cd terraform
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
